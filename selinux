## Configure SELinux.

## SELinux works in one of three modes: enforcing, permissive, disabled.

# grep ^SELINUX /etc/selinux/config
SELINUX=enforcing
SELINUXTYPE=targeted

# getenforce
Enforcing

# setenforce
usage:  setenforce [ Enforcing | Permissive | 1 | 0 ]

## The most powerful way of getting SELinux information is by using man
## pages. On RHEL 7 SELinux man pages are not installed by default.
## We can install them and update the manual page index caches.

# yum provides *\sealert *\semanage *\sepolicy *\seinfo
# yum install -y policycoreutils-python policycoreutils-devel \
  setroubleshoot-server setools-console

# sepolicy manpage -a -p /usr/share/man/man8
# mandb

## Use SELinux man pages:

$ man -k _selinux | less
$ man audit2allow
$ man semanage
$ man semanage-port
$ man semanage-fcontext
$ man semanage-user
$ man seinfo
$ man restorecon

## Listing various SElinux information:

# semanage fcontext -l
# semanage port -l
# semanage user -l
# semanage login -l
# semanage permissive -l
# getsebool -a

## Display the table that SELinux uses for this mapping:

# semanage login -l
Login Name           SELinux User         MLS/MCS Range        Service

__default__          unconfined_u         s0                   *
root                 unconfined_u         s0-s0:c0.c1023       *
sandy                user_u               s0                   *
system_u             system_u             s0-s0:c0.c1023       *
tomcat               staff_u              s0-s0:c0.c1023       *
vince                staff_u              s0-s0:c0.c1023       *

## Confined SELinux users:

unconfined_u - do not have additional user-based SELinux restrictions.
user_u   - non administrative users, no "su" or "sudo" is allowed.
staff_u  - regular users, can use "sudo" but not "su".
sysadm_u - system admin users, "su" and "sudo" are allowed.
system_u - user for system services. Do not use it for Linux users.

## Note that Linux users are mapped to the SELinux user unconfined_u.
## To modify the default mapping to user_u: (see man semanage-login):

# semanage login -m -s user_u -r s0 __default__

## Map an existing Linux user to an SELinux user:

# semanage login -a -s sysadm_u vince

## Remove the mapping:

# semanage login -d -s sysadm_u vince

## SELinux usage examples.
## Add file-context for everything under /mnt/block1:

# semanage fcontext -a -t httpd_sys_content_t "/mnt/block1(/.*)?"
# restorecon -Rv /mnt/block1

## Allow Apache to listen on TCP port 8888:

# semanage port -a -t http_port_t -p tcp 8888

## Allow Apache to send emails (permanently):

# setsebool -P httpd_can_sendmail=1

## Interpret SELinux violations and determine remedial action:

# grep denied /var/log/audit/audit.log
# ausearch --start boot -m AVC
# sealert -a /var/log/audit/audit.log

## Restrict user activity with SELinux user mappings.
## At login time, SELinux maps Linux users to SELinux users.
## Note: Linux users mapped to unconfined_u do not have additional
## user-based SELinux restrictions! Do not use system_u for Linux users.

## SELinux prevents Linux users mapped to user_u from becoming root by
## using su or sudo:

# useradd -Z user_u sandy

## Linux users mapped to staff_u can use sudo but not su:

# useradd -Z staff_u tomcat

## SELinux allows Linux users mapped to sysadm_u to use su and sudo:

# useradd -Z sysadm_u vincent

## Note: by default users mapped to sysadm_u cannot use SSH to log in.
## Set the ssh_sysadm_login boolean to on if you need to allow it.

# setsebool -P ssh_sysadm_login on

## We can restrict whether or not users can run executables in their
## home directory or in /tmp:

# getsebool -a|grep exec_content
auditadm_exec_content --> on
dbadm_exec_content --> on
guest_exec_content --> on
logadm_exec_content --> on
secadm_exec_content --> on
staff_exec_content --> on
sysadm_exec_content --> on
user_exec_content --> on
xguest_exec_content --> on

## To prevent users from executing programs in their home directories
## and /tmp, set boolean user_exec_content to off:

# setsebool -P user_exec_content off

## IMPORTANT: SELinux allows staff_u users to change role to sysadm_r:

# semanage user -l

                Labelling  MLS/       MLS/
SELinux User    Prefix     MCS Level  MCS Range          SELinux Roles

guest_u         user       s0         s0                 guest_r
root            user       s0         s0-s0:c0.c1023     staff_r sysadm_r system_r unconfined_r
staff_u         user       s0         s0-s0:c0.c1023     staff_r sysadm_r system_r unconfined_r
sysadm_u        user       s0         s0-s0:c0.c1023     sysadm_r
system_u        user       s0         s0-s0:c0.c1023     system_r unconfined_r
unconfined_u    user       s0         s0-s0:c0.c1023     system_r unconfined_r
user_u          user       s0         s0                 user_r
xguest_u        user       s0         s0                 xguest_r

## This comes in handy when a user needs to run commands with sudo. In
## such case the user needs to change his current role to sysadm_r:










***********************

dynmaically toggle a domain to permissive and then restore:

semanage permissive -a httpd_t

semodule -l | grep permissive  # to list all permissive domains

semanage permissive -d httpd_t

***********************

rpm -q --whatprovides /usr/share/selinux/devel/Makefile 
selinux-policy-devel-3.13.1-229.el7_6.9.noarch

make -f /usr/share/selinux/devel/Makefile  # makes policy modules in current directory
sudo semodule -i daf.pp # activate/insert the new module






+----------------------------------------------------------------------------------
|	SELinux cheat sheet
+------------------------------------------------------------------------------------

  # sestatus  		<- Check if SELinux is enabled, etc.

  # setenforce 1	<- Enables SELinux
  
  # touch /.autorelabel  <- Relabel at reboot


+ Labels
  #chcon system_u:object_r:etc_t /etc/hosts /etc/hosts.allow	<- Labels

  #chcon --reference=/etc/hosts /etc/hosts.allow /etc/hosts.deny	<- Labels using another file's secContext
 
  #fixfiles restore						<- Relabels EVERYTHING

  #restorecon [-n] [-v] /etc/hosts			<- Labels *one or more* "files" (src/policy/file_contexts/file_contexts)
  #setfiles file_contexts/file_contexts /home/bill	<- Labels *one or more* "files or filesystems" (..file..)

  #runcon -u system_u -r system_r -t crond_t /usr/sbin/crond	<- Run process under custom SecContext
  #runcon    system_u:system_r:crond_t       /usr/sbin/crond

  #newrole -r sysadm_r -t sysadm_t  			<- Entering a role

-------------------------------------------------------------------------------------------------------------

+ ALLOWING RESTRICTIONS:
+---------------------
If something is restricted we can see it in /var/log/messages*
We can automatically generated a new rule to avoid that:   (we have to carefully analyze it before implementing it)

 # audit2allow -i /var/log/messages -l
 allow httpd_sys_script_t httpd_sys_script_ro_t:dir { write };

We realize "allow" wont be secure in this case, we modify the policy like this:
 dontaudit httpd_sys_script_t httpd_sys_script_ro_t:dir { write };. 


+ ADDING THE NEW POLICY:
+---------------------
 We go to the "src/policy" dir:
   # cd /etc/selinux/strict/src/policy
 
 We create the .te and add the policy:
  # echo "dontaudit httpd_sys_script_t httpd_sys_script_ro_t:dir { write };" > domains/misc/local.te

 Compile them! ;)
   # make reload



+ ADD USERS
+ --------------
 >user hugoadmin roles {staff_r sysadm_r [system_r]};
 >user bob roles {user_r};

 ifdef(`user_canbe_sysadm',`sysadm_r system_r')
 ifdef(`direct_sysadm_daemon',`system_r')

#make load <- relabel

BACKING UP:
$ls -Z /var/log/maillog
 -rw-------  root   root    system_u:object_r:var_log_t   /var/log/maillog
$cd /var/log
$star -xattr -H=exustar -c -f maillog.star ./maillog*


+ Debugging
+ ---------------------------------
  dmesg -c
  watch audit2allow -d


+ Listing current loaded modules
+ --------------------------------------------------------------------
  semodule -l

+ Generating rules from logs
+ --------------------------------------------------------------------    
  audit2allow -M local-fixes -d
        
  semodule -i localfixes.pp


+ Building and loading SELinux module
+ -------------------------------------------------------------------
  vi localfixes.te           
	    
  checkmodule -M -m -o localfixes.mod localfixes.te
   
  semodule_package -o localfixes.pp -m localfixes.mod 
       
  semodule -i localfixes.pp 

+ Fixing SElinux problems
+ -------------------------------------------------------------------

 + SELinux is all about labeling
   - If files are stored in a location that is not the default then
     those files need to have a different label

   - Example Fix
      semanage fcontext -a -t httpd_sys_content_t '/srv/myweb(/.*)?'

   - Restore the label
      restorecon -R /srv/myweb
      matchpathcon /srv/myweb  // prints default label

 + You have to tell SELinux about how a confined process is being run.

   - if/then/else rules called booleans that allow you to tweak the predefined rules to allow different access

   - Debug
     setroubleshoot
     audit2allow -w
     audit2why

   - List booleans
     getsebool -a

   - example
      setsebool -P httpd_can_network_connect_db 1

  + SELinux rules are evolving and applications are sometimes broken
    - Generate a local policy module
      grep postgresql /var/log/audit/audit.log | audit2allow -R -M mypostgresql
      semodule -i mypostgresql.pp 

   - report the SELinux errors to bugzilla or a mailing list so your local
   modifications can be added to the distribution's policy or upstream.


To make a policy from *.fc and *.te files:

1016  make -f /usr/share/selinux/devel/Makefile
 1017  install -p -m 644 -D simp-rsync.pp /usr/share/selinux/packages/simp-rsync.pp
 1018  /usr/sbin/semodule -n -i /usr/share/selinux/packages/simp-rsync.pp
 1019  load_policy

(load_policy is not needed if you drop the -n option from semodule.)


To see what policies are loaded:

semodule -l

to create selinux modules from autdit denies use

audit2allow


Some links:




Using multiple priorities with modules
Date  Fri 31 October 2014 By  Sven Vermeulen Category SELinux Tags priorities / priority / selinux / semodule
One of the new features of the 2.4 SELinux userspace is support for module priorities. The idea is that distributions and administrators can override a (pre)loaded SELinux policy module with another module without removing the previous module. This lower-version module will remain in the store, but will not be active until the higher-priority module is disabled or removed again.

The "old" modules (pre-2.4) are loaded with priority 100. When policy modules with the 2.4 SELinux userspace series are loaded, they get loaded with priority 400. As a result, the following message occurs:

~# semodule -i screen.pp
libsemanage.semanage_direct_install_info: Overriding screen module at lower priority 100 with module at priority 400
So unlike the previous situation, where the older module is substituted with the new one, we now have two "screen" modules loaded; the last one gets priority 400 and is active. To see all installed modules and priorities, use the --list-modules option:

~# semodule --list-modules=all | grep screen
100 screen     pp
400 screen     pp
Older versions of modules can be removed by specifying the priority:

~# semodule -X 100 -r screen






EXAMPLE
       # Install or replace a base policy package.
       $ semodule -b base.pp
       # Install or replace a non-base policy package.
       $ semodule -i httpd.pp
       # List non-base modules.
       $ semodule -l
       # Turn on all AVC Messages for which SELinux currently is "dontaudit"ing.
       $ semodule -DB
       # Turn "dontaudit" rules back on.
       $ semodule -B
       # Install or replace all non-base modules in the current directory.
       $ semodule -i *.pp
       # Install or replace all modules in the current directory.
       $ ls *.pp | grep -Ev "base.pp|enableaudit.pp" | xargs /usr/sbin/semodule -b base.pp -i
       # Disable a module.
       $ semodule -d alsa
       # Install a module at a specific priority.
       $ semodule -X 100 -i alsa.pp
       # List all modules.
       $ semodule --list=full
       # Set an alternate path for the policy root
       $ semodule -B -p "/tmp"
       # Set an alternate path for the policy store root
       $ semodule -B -S "/tmp/var/lib/selinux"
       # Write the HLL version of puppet and the CIL version of wireshark
       # modules at priority 400 to the current working directory
       $ semodule -X 400 --hll -E puppet --cil -E wireshark

